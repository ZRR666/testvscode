一.p3基本语法
#标识符：
    以字母和_开头，其余部分以字母、数字、_组成

#注释：
    1.#
    2.'''
         ……
      '''
    3."""
         ……
      """

#多行语句：
    使用反斜杠"\"
    在[]、{}、()里的多行语句不需要

#print
    默认带有换行，若不想带换行，则print(str,end="")

#import与from …… import
    import 导入某模块
    from …… import 从某模块导入某个、某几个（逗号分隔）、全部函数（*）

=================================================================

二.基本数据类型

Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。

字符串、元组、列表都属于序列sequence，序列都可以进行的操作包括索引，切片，加，乘，检查成员。

python中一切都是对象

#数字类（不可变）
    int 长整型,没有限制大小
    float
    bool    （true：1，false：0）
    complex
        复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。

    @数值运算
        >> 2 / 4  # 除法，得到一个浮点数
            0.5
        >>> 2 // 4 # 除法，得到一个整数
            0
        >>> 17 % 3 # 取余 
            2
        >>> 2 ** 5 # 乘方
            32
    
    0x 十六进制
    0o 八进制

    数字类型转换：
        int()
        float()
        complex(x)
        complex(x,y)

#字符串（不可变,Unicode字符串）
    字符串的截取：变量[头下标:尾下标]
        头下标（索引值）：
            以 0 为开始值，-1 为从末尾的开始位置。
        尾下标（截取）：
            以 1 为开始值，-1 为从末尾的开始位置。
        
        变量[索引值:索引值:步长]
            str = "abcdefg"
            str[0:3:2]：
                    0和3定位到：abcd
                    步长为2：ac

    print (str * 2)      # 输出字符串两次
    print (str + "TEST") # 连接字符串

    >>> print('Ru\noob')    转义
        Ru
        oob
    >>> print(r'Ru\noob')   不转义，原始字符串,大写R也行
        Ru\noob

    @字符串格式化：
        如：print ("我叫 %s 今年 %d 岁!" % ('小明', 10))
        格式化字符串的函数 str.format()，它增强了字符串格式化的功能

    @三引号
        允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符（所见即所得）
        para_str = """这是一个多行字符串的实例
                        多行字符串可以使用制表符
                        TAB ( \t )。
                        也可以使用换行符 [ \n ]。
                   """
                   或者''' …… '''

    @python字符串有很多内建函数

#元组（tuple，不可变）
    (),逗号分隔，不用括号也行
    元组中的元素值是不允许删除的（元组不可变），但我们可以使用del语句来删除整个元组，可以用+，*

    tup1 = ()    # 空元组
    tup2 = (20,) # 一个元素，需要在元素后添加逗号

#列表
    []，逗号分隔元素
    截取的语法和字符串相同
    +，*的作用和字符串相同

    len()  列表长度
    添加新对象（在列表末尾）：append()
    统计某个元素在列表中出现的次数：count()
    删除列表元素：del list[2]
    移除列表中某个值的第一个匹配项：remove(obj)
    ……（还有很多其他方法）

#字典
    无序，不用偏移值作为下标，而是用key值
    { }，键(key) : 值(value) 的集合。
        键(key)必须使用不可变类型。
        在同一个字典中，键(key)必须是唯一的。

#集合(set)
    { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
    集合中，重复的元素被自动去掉，无序

    集合运算：
        print(a - b)     # a 和 b 的差集：结果为a有，b没有的元素
        print(a | b)     # a 和 b 的并集
        print(a & b)     # a 和 b 的交集
        print(a ^ b)     # a 和 b 中不同时存在的元素

    删除元素：.remove()  若元素不存在会报错
            .discard()              不会报错

============================================================

三.运算符
#算术运算符  a**b:a的b次方
#关系运算符
#赋值运算符
#逻辑：
    and、or、not
#位：
    &、|、~
    ^异或：相异为1
    << 向左移动，高位丢弃，低位补0
    >> 向右移动，高位补0，低位丢弃
#成员运算符：
    in	    如果在指定的序列中找到值返回 True，否则返回 False。
    not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	
#身份运算符：
    is	    是判断两个标识符是不是引用自一个对象	x is y, 类似 id(x) == id(y) , id()函数用于获取对象内存地址。
    is not	是判断两个标识符是不是引用自不同对象

    is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。
#优先级

===========================================================================

四.条件控制
    1.if 条件：
            ……
            ……
      elif 条件：
            ……
            ……
      else:
            ……

    2.在Python中没有switch – case语句

============================================

五.循环语句
    1.while 条件：
            语句
    
    2.没有do……while

    3.while ... :
            ...
      else：
            ...
    
    4.for <variable> in <sequence>:
            <statements>
      else:
            <statements>

    5.sites = ["Baidu", "Google","Runoob","Taobao"]
      for site in sites:
        if site == "Runoob":
            print("菜鸟教程!")
            break
        print("循环数据 " + site)
      else:
        print("没有循环数据!")
      print("完成循环!")

      break 语句用于跳出当前循环体：这里的else是for的另一个分支，故break时，也将它跳过

    6.continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。

    7. pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句

==============================================================================

六.迭代器与生成器：
    迭代器：
        两个基本函数 iter()，next()
        StopIteration 异常，与next搭配，防止出现无限循环的情况
        sys.exit()捕获上面异常后的操作
    生成器：
        yield

==============================================================================

七.函数
 1.语法：
    def 函数名(参数列表)：
        函数体

 2.返回：
    如果return后没有值，则返回none

 3.参数传递：
     （传入不可变对象）如果传入的是不可变类型参数：则实际是在传参时，复制了一个相同的参数，函数里对该复制体的修改，不影响函数体外的参数本身
     （传入可变对象）  如果传入的是可变类型参数：则函数内部对参数的修改，就是对函数体外该参数的实际修改

 4.参数：
    @必需参数：讲究参数的顺序，myFunction(a,b)  ->   myFunction(10,12),其中的10是参数a,12是b
    @关键字参数：可以不按定义的顺序传参，myFunction(a,b) -> myFunction(b=10,a=12)
    @默认参数：myFunction(a,b=5) -> myFunction(2,3) ,其中b=3
                                -> myFunction(2)，其中b默认为5
    @不定长参数：myFunciton(a,b,*var_tuple)
                加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。
                可以是myFunction(10,20,30,40)，其中30和40会组合成一个元组
                也可以myFunction(10,20)

                myFunciton(a,b,**var_tuple)
                加了星号 ** 的参数会以字典的形式导入
                如：myFunction(a,b,c=10,d=20),其中c=10,d=20组成一个字典

                如果myFunction(a,*var_tuple,b):
                        myFunciton(1,2,3)   会报错
                        要写成myFunction(1,2,b=3),*后面的参数必须用关键字传递

 5.匿名函数：
    myFuntion = lambda arg1,arg2:arg1+arg2
    则相当于创建了一个myFunction(arg1,arg2)函数
    调用：myFunction(10,20)

 6.变量作用域：
    L （Local） 局部作用域
    E （Enclosing） 闭包函数外的函数中
    G （Global） 全局作用域
    B （Built-in） 内置作用域（内置函数所在模块的范围） 
    从上至下的查找

    Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问

 7.全局变量与局部变量
    total = 0 # 这是一个全局变量
    def sum( arg1, arg2 ):
        #返回2个参数的和."
        total = arg1 + arg2 # total在这里是局部变量.
        print ("函数内是局部变量 : ", total)
        return total
 
    #调用sum函数
    sum( 10, 20 )
    print ("函数外是全局变量 : ", total)
    -----------------------------------
    实际输出：
    函数内是局部变量 :  30
    函数外是全局变量 :  0

 8.global 和 nonlocal关键字：
     如果想在函数中改变全局变量a，则在改变变量之前，加上global a。
     如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字 